# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "additional_yum_repos" {
  type    = string
  default = ""
}

variable "ami_users" {
  type    = string
  default = ""
}

variable "arch" {
  type    = string
  default = "x86_64"
}

variable "associate_public_ip_address" {
  type    = string
  default = ""
}

variable "aws_profile" {
  type    = string
  default = "${env("AWS_PROFILE")}"
}

variable "aws_region" {
  type    = string
  default = "us-west-2"
}

variable "binary_bucket_name" {
  type    = string
  default = "amazon-eks"
}

variable "binary_bucket_region" {
  type    = string
  default = "us-west-2"
}

variable "cleanup_image" {
  type    = string
  default = "true"
}

variable "cni_plugin_version" {
  type    = string
  default = "v0.8.6"
}

variable "containerd_version" {
  type    = string
  default = "1.6.6-1.amzn2"
}

variable "creator" {
  type    = string
  default = "${env("USER")}"
}

variable "data_volume_size" {
  type    = string
  default = "80"
}

variable "docker_version" {
  type    = string
  default = "20.10.17-1.amzn2"
}

variable "encrypted" {
  type    = string
  default = "false"
}

variable "instance_type" {
  type    = string
  default = "m6i.large"
}

variable "kernel_version" {
  type    = string
  default = ""
}

variable "kms_key_id" {
  type    = string
  default = ""
}

variable "kubernetes_build_date" {
  type    = string
  default = "2022-07-27"
}

variable "kubernetes_version" {
  type    = string
  default = "1.23.9"
}

variable "launch_block_device_mappings_volume_size" {
  type    = string
  default = "80"
}

variable "product-code" {
  type    = string
  default = "4ks0lssia3phyyrbckdk9xgba"
}

variable "pull_cni_from_github" {
  type    = string
  default = "true"
}

variable "remote_folder" {
  type    = string
  default = ""
}

variable "root_volume_size" {
  type    = string
  default = "80"
}

variable "runc_version" {
  type    = string
  default = "1.1.3-1.amzn2"
}

variable "security_group_id" {
  type    = string
  default = ""
}

variable "sonobuoy_e2e_registry" {
  type    = string
  default = ""
}

variable "source_ami_arch" {
  type    = string
  default = "x86_64"
}

variable "source_ami_name" {
  type    = string
  default = "clear-3*"
}

variable "source_ami_owner" {
  type    = string
  default = "679593333241"
}

variable "source_ami_ssh_user" {
  type    = string
  default = "clear"
}

variable "ssh_interface" {
  type    = string
  default = ""
}

variable "ssh_username" {
  type    = string
  default = "clear"
}

variable "subnet_id" {
  type    = string
  default = "subnet-1881bb33"
}

variable "temporary_security_group_source_cidrs" {
  type    = string
  default = ""
}

variable "vpc_id" {
  type    = string
  default = "vpc-96a88eee"
}

# The amazon-ami data block is generated from your amazon builder source_ami_filter; a data
# from this block can be referenced in source and locals blocks.
# Read the documentation for data blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/data
# Read the documentation for the Amazon AMI Data Source here:
# https://www.packer.io/docs/datasources/amazon/ami
data "amazon-ami" "autogenerated_1" {
  filters = {
    name         = "clear-3*"
    product-code = "4ks0lssia3phyyrbckdk9xgba"
  }
  most_recent = true
  owners      = ["679593333241"]
  region      = "${var.aws_region}"
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# All locals variables are generated from variables that uses expressions
# that are not allowed in HCL2 variables.
# Read the documentation for locals blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/locals
locals {
  ami_description = "EKS Kubernetes Worker AMI on Clear Linux (k8s: ${var.eks_version})"
  ami_name        = "clear-node-${var.eks_version}-${local.timestamp}"
  target_ami_name = "amazon-eks-node-${var.kubernetes_version}-clear-${local.timestamp}"
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "amazon-ebs" "autogenerated_1" {
  ami_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sdb"
    volume_size           = "${var.data_volume_size}"
    volume_type           = "gp3"
  }
  ami_description             = "${local.ami_description}, (k8s: ${var.kubernetes_version}, docker: ${var.docker_version}, containerd: ${var.containerd_version})"
  ami_name                    = "${local.target_ami_name}"
  ami_users                   = "${var.ami_users}"
  associate_public_ip_address = "${var.associate_public_ip_address}"
  encrypt_boot                = "${var.encrypted}"
  instance_type               = "${var.instance_type}"
  kms_key_id                  = "${var.kms_key_id}"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "${var.root_volume_size}"
    volume_type           = "gp3"
  }
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sdb"
    volume_size           = "${var.data_volume_size}"
    volume_type           = "gp3"
  }
  region = "${var.aws_region}"
  run_tags = {
    creator = "${var.creator}"
  }
  security_group_id = "${var.security_group_id}"
  snapshot_users    = "${var.ami_users}"
  source_ami        = "${data.amazon-ami.autogenerated_1.id}"
  ssh_interface     = "${var.ssh_interface}"
  ssh_pty           = true
  ssh_username      = "${var.ssh_username}"
  subnet_id         = "${var.subnet_id}"
  tags = {
    Name               = "${local.target_ami_name}"
    cni_plugin_version = "${var.cni_plugin_version}"
    containerd_version = "${var.containerd_version}"
    created            = "${local.timestamp}"
    docker_version     = "${var.docker_version}"
    kubernetes         = "${var.kubernetes_version}/${var.kubernetes_build_date}/bin/linux/${var.arch}"
    source_ami_id      = "${var.source_ami_id}"
  }
  temporary_security_group_source_cidrs = "${var.temporary_security_group_source_cidrs}"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "shell" {
    inline = ["sudo mkdir -p /etc/sudoers.d", "sudo touch /etc/sudoers.d/sudoers", "RND=$(openssl rand -base64 32); PWD=$(openssl passwd -1 -salt 5RPVAd $${RND}); for i in clear root; do sudo usermod -p $${PWD} $${i}; done", "sudo sed -i '0,/%wheel[[:space:]]*ALL=(ALL)[[:space:]]*ALL/{s||%wheel        ALL=(ALL)       NOPASSWD: ALL|}' /etc/sudoers.d/sudoers"]
  }

  provisioner "shell" {
    inline = ["sudo mkdir -p ~/usr/bin", "sudo mkdir -p ~/usr/lib64", "sudo touch /etc/environment", "sudo touch /etc/profile", "echo 'PATH=$PATH:~/usr/bin' | sudo tee --append /etc/environment", "echo 'PATH=$PATH:~/usr/bin' | sudo tee --append /etc/profile", "echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/lib64' | sudo tee --append /etc/environment", "echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/lib64' | sudo tee --append /etc/profile"]
  }

  provisioner "shell" {
    inline        = ["mkdir -p /tmp/worker/", "mkdir -p /tmp/services/", "mkdir -p /tmp/mods-bin/", "mkdir -p /tmp/mods-conf/"]
    remote_folder = "${var.remote_folder}"
  }

  provisioner "file" {
    destination = "/tmp/worker/"
    source      = "${path.root}/files/"
  }

  provisioner "file" {
    destination = "/tmp/mods-bin/"
    source      = "${path.root}/mods/bin/"
  }

  provisioner "file" {
    destination = "/tmp/services/"
    source      = "${path.root}/mods/services/"
  }

  provisioner "file" {
    destination = "/tmp/mods-conf/"
    source      = "${path.root}/mods/conf/"
  }

  provisioner "shell" {
    inline = ["sudo mkdir -p /etc/sudoers.d", "sudo touch /etc/sudoers.d/sudoers", "RND=$(openssl rand -base64 32); PWD=$(openssl passwd -1 -salt 5RPVAd $${RND}); for i in clear root; do sudo usermod -p $${PWD} $${i}; done", "sudo sed -i '0,/%wheel[[:space:]]*ALL=(ALL)[[:space:]]*ALL/{s||%wheel        ALL=(ALL)       NOPASSWD: ALL|}' /etc/sudoers.d/sudoers"]
  }

  provisioner "shell" {
    environment_vars  = ["KUBERNETES_VERSION=${var.kubernetes_version}", "KUBERNETES_BUILD_DATE=${var.kubernetes_build_date}", "BINARY_BUCKET_NAME=${var.binary_bucket_name}", "BINARY_BUCKET_REGION=${var.binary_bucket_region}", "DOCKER_VERSION=${var.docker_version}", "CONTAINERD_VERSION=${var.containerd_version}", "RUNC_VERSION=${var.runc_version}", "CNI_PLUGIN_VERSION=${var.cni_plugin_version}", "PULL_CNI_FROM_GITHUB=${var.pull_cni_from_github}", "AWS_ACCESS_KEY_ID=${var.aws_access_key_id}", "AWS_SECRET_ACCESS_KEY=${var.aws_secret_access_key}", "AWS_SESSION_TOKEN=${var.aws_session_token}", "CLEANUP_IMAGE=${var.cleanup_image}", "SONOBUOY_E2E_REGISTRY=${var.sonobuoy_e2e_registry}"]
    execute_command   = "echo 'packer' | {{ .Vars }} sudo -S -E bash -eux '{{ .Path }}'"
    expect_disconnect = true
    pause_after       = "30s"
    remote_folder     = "${var.remote_folder}"
    script            = "${path.root}/mods/scripts/install-clear-worker.sh"
  }

  provisioner "shell" {
    execute_command = "echo 'packer' | {{ .Vars }} sudo -S -E bash -eux '{{ .Path }}'"
    script          = "${path.root}/mods/scripts/setup-mods.sh"
  }

  post-processor "manifest" {
    output     = "manifest.json"
    strip_path = true
  }
  post-processor "manifest" {
    output     = "${local.ami_name}-manifest.json"
    strip_path = true
  }
}
